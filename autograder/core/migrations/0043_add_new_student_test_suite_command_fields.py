# Generated by Django 2.2 on 2019-05-23 21:47

import autograder.core.fields
import autograder.core.models.ag_command.ag_command_base
import autograder.core.models.student_test_suite.student_test_suite
import django.core.validators
from django.db import migrations, models


def migrate_student_test_suite_commands(apps, schema_editor):
    StudentTestSuite = apps.get_model('core', 'StudentTestSuite')

    cmd_field_names = [
        'setup_command',
        'get_student_test_names_command',
        'student_test_validity_check_command',
        'grade_buggy_impl_command',
    ]

    for suite in StudentTestSuite.objects.all():
        for field_name in cmd_field_names:
            old_field_name = 'old_' + field_name
            cmd_settings = {
                'name': getattr(suite, old_field_name).name,
                'cmd': getattr(suite, old_field_name).cmd,
                'time_limit': getattr(suite, old_field_name).time_limit,
                'stack_size_limit': getattr(suite, old_field_name).stack_size_limit,
                'virtual_memory_limit': getattr(suite, old_field_name).virtual_memory_limit,
                'process_spawn_limit': getattr(suite, old_field_name).process_spawn_limit,
            }
            setattr(suite, field_name, cmd_settings)

        suite.full_clean()
        suite.save()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0042_rename_student_test_suite_command_fields'),
    ]

    operations = [
        migrations.AddField(
            model_name='studenttestsuite',
            name='get_student_test_names_command',
            field=autograder.core.fields.ValidatedJSONField(default=autograder.core.models.student_test_suite.student_test_suite.new_make_default_get_student_test_names_cmd, help_text="This required command should print out a whitespace-separated\n                     list of detected student names. The output of this command will\n                     be parsed using Python's str.split().", serializable_class=autograder.core.models.ag_command.ag_command_base.Command),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='grade_buggy_impl_command',
            field=autograder.core.fields.ValidatedJSONField(default=autograder.core.models.student_test_suite.student_test_suite.new_make_default_grade_buggy_impl_command, help_text="\n            This command will be run once for every (buggy implementation, valid test) pair.\n            A nonzero exit status indicates that the valid student tests exposed the\n            buggy impl, whereas an exit status of zero indicates that the student\n            tests did not expose the buggy impl.\n            This command must contain the placeholders ${student_test_name} and ${buggy_impl_name}. The placeholder\n            ${student_test_name} will be replaced with the name of a valid student test case.\n            The placeholder ${buggy_impl_name} will be replaced with the name of\n            the buggy impl that the student test is being run against.\n            NOTE: This AGCommand's 'cmd' field must not be blank.\n        ", serializable_class=autograder.core.models.ag_command.ag_command_base.Command),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='setup_command',
            field=autograder.core.fields.ValidatedJSONField(default=autograder.core.models.student_test_suite.student_test_suite.new_make_default_setup_cmd, help_text='A command to be run after student and project files have\n                     been added to the sandbox but before any other commands are run.\n                     To indicate that no setup command should be run,\n                     set use_setup_command to False.', serializable_class=autograder.core.models.ag_command.ag_command_base.Command),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='student_test_validity_check_command',
            field=autograder.core.fields.ValidatedJSONField(default=autograder.core.models.student_test_suite.student_test_suite.new_make_default_validity_check_command, help_text="This command will be run once for each detected student test case.\n                     An exit status of zero indicates that a student test case is valid,\n                     whereas a nonzero exit status indicates that a student test case\n                     is invalid.\n                     This command must contain the placeholder ${student_test_name} at least once. That\n                     placeholder will be replaced with the name of the student test case\n                     that is to be checked for validity.\n                     NOTE: This AGCommand's 'cmd' field must not be blank.\n                     ", serializable_class=autograder.core.models.ag_command.ag_command_base.Command),
        ),
        migrations.AlterField(
            model_name='agcommand',
            name='process_spawn_limit',
            field=models.IntegerField(default=0, help_text="The maximum number of processes that the command is allowed to spawn.\n            Must be >= 0\n            Must be <= 150\n            NOTE: This limit applies cumulatively to the processes\n                  spawned by the main program being run. i.e. If a\n                  spawned process spawns it's own child process, both\n                  of those processes will count towards the main\n                  program's process limit.", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(150)]),
        ),
        migrations.AlterField(
            model_name='agcommand',
            name='stack_size_limit',
            field=models.IntegerField(default=10000000, help_text='The maximum stack size in bytes.\n            Must be > 0\n            Must be <= 100000000\n            NOTE: Setting this value too low may cause the command to crash prematurely.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100000000)]),
        ),
        migrations.AlterField(
            model_name='agcommand',
            name='time_limit',
            field=models.IntegerField(default=10, help_text='The time limit in seconds to be placed on the command.\n            Must be > 0\n            Must be <= 90', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(90)]),
        ),
        migrations.AlterField(
            model_name='agcommand',
            name='virtual_memory_limit',
            field=models.BigIntegerField(default=500000000, help_text='The maximum amount of virtual memory\n            (in bytes) the command can use.\n            Must be > 0\n            Must be <= 4000000000\n            NOTE: Setting this value too low may cause the command to crash prematurely.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4000000000)]),
        ),
        migrations.AlterField(
            model_name='agcommandresult',
            name='stderr_truncated',
            field=models.BooleanField(blank=True, default=False, help_text="Whether the command's stderr was truncated."),
        ),
        migrations.AlterField(
            model_name='agcommandresult',
            name='stdout_truncated',
            field=models.BooleanField(blank=True, default=False, help_text="Whether the command's stdout was truncated."),
        ),
        migrations.AlterField(
            model_name='agcommandresult',
            name='timed_out',
            field=models.BooleanField(blank=True, default=False, help_text='Whether the command exceeded its time limit.'),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='process_spawn_limit',
            field=models.IntegerField(default=0, help_text="The maximum number of processes that the command is allowed to spawn.\n            Must be >= 0\n            Must be <= 150\n            NOTE: This limit applies cumulatively to the processes\n                  spawned by the main program being run. i.e. If a\n                  spawned process spawns it's own child process, both\n                  of those processes will count towards the main\n                  program's process limit.", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(150)]),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='stack_size_limit',
            field=models.IntegerField(default=10000000, help_text='The maximum stack size in bytes.\n            Must be > 0\n            Must be <= 100000000\n            NOTE: Setting this value too low may cause the command to crash prematurely.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100000000)]),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='time_limit',
            field=models.IntegerField(default=10, help_text='The time limit in seconds to be placed on the command.\n            Must be > 0\n            Must be <= 90', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(90)]),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='virtual_memory_limit',
            field=models.BigIntegerField(default=500000000, help_text='The maximum amount of virtual memory\n            (in bytes) the command can use.\n            Must be > 0\n            Must be <= 4000000000\n            NOTE: Setting this value too low may cause the command to crash prematurely.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4000000000)]),
        ),
        migrations.AlterField(
            model_name='agtestcommandresult',
            name='stderr_truncated',
            field=models.BooleanField(blank=True, default=False, help_text="Whether the command's stderr was truncated."),
        ),
        migrations.AlterField(
            model_name='agtestcommandresult',
            name='stdout_truncated',
            field=models.BooleanField(blank=True, default=False, help_text="Whether the command's stdout was truncated."),
        ),
        migrations.AlterField(
            model_name='agtestcommandresult',
            name='timed_out',
            field=models.BooleanField(blank=True, default=False, help_text='Whether the command exceeded its time limit.'),
        ),
        migrations.AlterField(
            model_name='agtestsuiteresult',
            name='setup_stderr_truncated',
            field=models.BooleanField(blank=True, default=False, help_text="Whether the setup command's stderr was truncated"),
        ),
        migrations.AlterField(
            model_name='agtestsuiteresult',
            name='setup_stdout_truncated',
            field=models.BooleanField(blank=True, default=False, help_text="Whether the setup command's stdout was truncated"),
        ),
        migrations.AlterField(
            model_name='agtestsuiteresult',
            name='setup_timed_out',
            field=models.BooleanField(blank=True, default=False, help_text="Whether this suite's setup command took too long to run."),
        ),
        migrations.AlterField(
            model_name='project',
            name='allow_submissions_past_limit',
            field=models.BooleanField(blank=True, default=True, help_text='Whether to allow additional submissions after a\n            group has submitted submission_limit_per_day times.'),
        ),
        migrations.AlterField(
            model_name='project',
            name='groups_combine_daily_submissions',
            field=models.BooleanField(blank=True, default=False, help_text='If True, group members can "pool" their daily submissions.\n            For example, if submission_limit_per_day is 3,\n            a group with 2 members would get 6 submissions per day.'),
        ),
        migrations.AlterField(
            model_name='project',
            name='hide_ultimate_submission_fdbk',
            field=models.BooleanField(blank=True, default=True, help_text='A hard override that indicates that ultimate\n            submission feedback should not be shown, even if the\n            appropriate criteria are met.'),
        ),

        migrations.RunPython(
            migrate_student_test_suite_commands, lambda apps, schema_editor: None
        )
    ]
