# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-05-09 17:19
from __future__ import unicode_literals

import autograder.core.models.ag_test.ag_test_case
import autograder.core.models.ag_test.ag_test_command
import autograder.core.models.ag_test.ag_test_suite
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0021_auto_20170508_2154'),
    ]

    operations = [
        migrations.AddField(
            model_name='agtestcommand',
            name='ignore_blank_lines',
            field=models.BooleanField(default=False, help_text='Ignore changes in blank lines when checking output. Equivalent to diff -B'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='ignore_case',
            field=models.BooleanField(default=False, help_text='Ignore case when checking output. Equivalent to diff -i'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='ignore_whitespace',
            field=models.BooleanField(default=False, help_text='Ignore inline whitespace when checking output. Equivalent to diff -w'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='ignore_whitespace_changes',
            field=models.BooleanField(default=False, help_text='Ignore whitespace changes when checking output. Equivalent to diff -b'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='normal_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_default_command_fdbk, help_text='Feedback settings for a normal Submission.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='past_limit_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_default_command_fdbk, help_text='Feedback settings for a Submission that is past the daily limit.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='process_spawn_limit',
            field=models.IntegerField(default=0, help_text="The maximum number of processes that the program\n            being tested is allowed to spawn.\n            Must be >= 0\n            Must be <= autograder.shared.global_constants.MAX_PROCESS_LIMIT\n            NOTE: This limit applies cumulatively to the processes\n                    spawned by the main program being run. i.e. If a\n                    spawned process spawns it's own child process, both\n                    of those processes will count towards the main\n                    program's process limit.", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='stack_size_limit',
            field=models.IntegerField(default=10000000, help_text='\n        stack_size_limit -- The maximum stack size in bytes.\n            Must be > 0\n            Must be <= autograder.shared.global_constants.MAX_STACK_SIZE_LIMIT\n            NOTE: Setting this value too low may cause the program being\n                    tested to crash prematurely.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100000000)]),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='staff_viewer_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_max_command_fdbk, help_text='Feedback settings for a staff member viewing a Submission from another group.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='time_limit',
            field=models.IntegerField(default=10, help_text='The time limit in seconds to be placed on the\n            program being tested. This limit currently applies to each\n            of: compilation, running the program, and running the\n            program with Valgrind (the timeout is applied separately to\n            each).\n            Must be > 0\n            Must be <= autograder.shared.global_constants\n                                 .MAX_SUBPROCESS_TIMEOUT', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)]),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='ultimate_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_default_ultimate_submission_command_fdbk, help_text='Feedback settings for an ultimate Submission.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='virtual_memory_limit',
            field=models.IntegerField(default=500000000, help_text='The maximum amount of virtual memory\n            (in bytes) the program being tested can use.\n            Must be > 0\n            Must be <= autograder.shared.global_constants.MAX_VIRTUAL_MEM_LIMIT\n            NOTE: Setting this value too low may cause the program being\n                    tested to crash prematurely.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000000000)]),
        ),
        migrations.AlterField(
            model_name='agtestcase',
            name='staff_viewer_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_case.make_default_test_fdbk, help_text='Feedback settings for a staff member viewing a Submission from another group.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestCaseFeedbackConfig'),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='expected_stderr_text',
            field=models.TextField(blank=True, help_text="A string whose contents should be compared against this command's stderr.\n                     This value is used when expected_stderr_source is ExpectedOutputSource.text\n                     and is ignored otherwise.", validators=[django.core.validators.MaxLengthValidator(8000000)]),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='expected_stdout_text',
            field=models.TextField(blank=True, help_text="A string whose contents should be compared against this command's stdout.\n                     This value is used when expected_stdout_source is ExpectedOutputSource.text\n                     and is ignored otherwise.", validators=[django.core.validators.MaxLengthValidator(8000000)]),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='stdin_text',
            field=models.TextField(blank=True, help_text='A string whose contents should be redirected to the stdin of this command.\n                     This value is used when stdin_source is StdinSource.text and is ignored\n                     otherwise.'),
        ),
        migrations.AlterField(
            model_name='agtestsuite',
            name='staff_viewer_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_suite.make_default_suite_fdbk, help_text='Feedback settings for a staff member viewing a submission from another group.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestSuiteFeedbackConfig'),
        ),
    ]
