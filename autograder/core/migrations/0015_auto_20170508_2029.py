# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-05-08 20:29
from __future__ import unicode_literals

import autograder.core.fields
import autograder.core.models.ag_model_base
import autograder.core.models.ag_test.ag_test_command
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0014_auto_20170505_2154'),
    ]

    operations = [
        migrations.CreateModel(
            name='AGTestCommand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', autograder.core.fields.ShortStringField(help_text='The name used to identify this command.\n                     Must be non-empty and non-null.\n                     Must be unique among commands that belong to the same autograder test.\n                     This field is REQUIRED.', max_length=255, strip=False)),
                ('cmd', autograder.core.fields.ShortStringField(help_text='A string containing the command to be run.\n                     Note: This string will be split using shlex.split() before it is executed.', max_length=255, strip=False)),
                ('ag_test_case', models.ForeignKey(default=None, help_text='When non-null, indicates that this command belongs to the specified\n                     autograder test.\n                     Either this field or ag_test_suite must be non-null.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ag_test_commands', to='core.AGTestCase')),
                ('ag_test_suite_is_setup_for', models.OneToOneField(default=None, help_text='When non-null, indicates that this command should be used as the setup\n                     command for the specified suite.\n                     Either this field or ag_test_case must be non-null.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='setup_command', to='core.AGTestSuite')),
            ],
            bases=(autograder.core.models.ag_model_base._AutograderModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestCommandFeedbackConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visible', models.BooleanField(default=True)),
                ('return_code_fdbk_level', autograder.core.fields.EnumField(choices=[('no_feedback', 'no_feedback'), ('correct_or_incorrect', 'correct_or_incorrect'), ('expected_and_actual', 'expected_and_actual')], default=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel('no_feedback'), enum_type=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel, max_length=255)),
                ('stdout_fdbk_level', autograder.core.fields.EnumField(choices=[('no_feedback', 'no_feedback'), ('correct_or_incorrect', 'correct_or_incorrect'), ('expected_and_actual', 'expected_and_actual')], default=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel('no_feedback'), enum_type=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel, max_length=255)),
                ('stderr_fdbk_level', autograder.core.fields.EnumField(choices=[('no_feedback', 'no_feedback'), ('correct_or_incorrect', 'correct_or_incorrect'), ('expected_and_actual', 'expected_and_actual')], default=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel('no_feedback'), enum_type=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel, max_length=255)),
                ('show_points', models.BooleanField(default=False)),
                ('show_actual_return_code', models.BooleanField(default=False)),
                ('show_actual_stdout', models.BooleanField(default=False)),
                ('show_actual_stderr', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base._AutograderModelMixin, models.Model),
        ),
        migrations.AlterUniqueTogether(
            name='agtestcommand',
            unique_together=set([('name', 'ag_test_case')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='agtestcommand',
            order_with_respect_to='ag_test_case',
        ),
    ]
