# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-07-13 20:44
from __future__ import unicode_literals

import autograder.core.fields
import autograder.core.models.ag_model_base
import autograder.core.models.ag_test.ag_test_case
import autograder.core.models.ag_test.ag_test_command
import autograder.core.models.ag_test.ag_test_suite
import autograder.core.models.autograder_test_case.autograder_test_case_base
import autograder.core.models.project.project
import autograder.core.utils
import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import timezone_field.fields


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0011_auto_20170403_0213'),
    ]

    operations = [
        migrations.CreateModel(
            name='AGTestCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', autograder.core.fields.ShortStringField(help_text='The name used to identify this autograder test.\n                     Must be non-empty and non-null.\n                     Must be unique among autograder tests that belong to the same suite.\n                     This field is REQUIRED.', max_length=255, strip=False)),
            ],
            bases=(autograder.core.models.ag_model_base._AutograderModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestCaseFeedbackConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('visible', models.BooleanField(default=True)),
                ('show_individual_commands', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base._AutograderModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestCaseResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('ag_test_case', models.ForeignKey(help_text='The AGTestCase that this result belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='related_ag_test_case_results', to='core.AGTestCase')),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base._AutograderModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestCommand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', autograder.core.fields.ShortStringField(help_text='The name used to identify this command.\n                     Must be non-empty and non-null.\n                     Must be unique among commands that belong to the same autograder test.\n                     This field is REQUIRED.', max_length=255, strip=False)),
                ('cmd', models.CharField(help_text='A string containing the command to be run.\n                     Note: This string will be split using shlex.split() before it is executed.', max_length=1000)),
                ('stdin_source', autograder.core.fields.EnumField(default=autograder.core.models.ag_test.ag_test_command.StdinSource('none'), enum_type=autograder.core.models.ag_test.ag_test_command.StdinSource, help_text='Specifies what kind of source stdin will be redirected from.')),
                ('stdin_text', models.TextField(blank=True, help_text='A string whose contents should be redirected to the stdin of this command.\n                     This value is used when stdin_source is StdinSource.text and is ignored\n                     otherwise.')),
                ('expected_return_code', autograder.core.fields.EnumField(default=autograder.core.models.ag_test.ag_test_command.ExpectedReturnCode('none'), enum_type=autograder.core.models.ag_test.ag_test_command.ExpectedReturnCode, help_text="Specifies the command's expected return code.")),
                ('expected_stdout_source', autograder.core.fields.EnumField(default=autograder.core.models.ag_test.ag_test_command.ExpectedOutputSource('none'), enum_type=autograder.core.models.ag_test.ag_test_command.ExpectedOutputSource, help_text="Specifies what kind of source this command's stdout should be compared to.")),
                ('expected_stdout_text', models.TextField(blank=True, help_text="A string whose contents should be compared against this command's stdout.\n                     This value is used when expected_stdout_source is ExpectedOutputSource.text\n                     and is ignored otherwise.", validators=[django.core.validators.MaxLengthValidator(8000000)])),
                ('expected_stderr_source', autograder.core.fields.EnumField(default=autograder.core.models.ag_test.ag_test_command.ExpectedOutputSource('none'), enum_type=autograder.core.models.ag_test.ag_test_command.ExpectedOutputSource, help_text="Specifies what kind of source this command's stderr should be compared to.")),
                ('expected_stderr_text', models.TextField(blank=True, help_text="A string whose contents should be compared against this command's stderr.\n                     This value is used when expected_stderr_source is ExpectedOutputSource.text\n                     and is ignored otherwise.", validators=[django.core.validators.MaxLengthValidator(8000000)])),
                ('ignore_case', models.BooleanField(default=False, help_text='Ignore case when checking output. Equivalent to diff -i')),
                ('ignore_whitespace', models.BooleanField(default=False, help_text='Ignore inline whitespace when checking output. Equivalent to diff -w')),
                ('ignore_whitespace_changes', models.BooleanField(default=False, help_text='Ignore whitespace changes when checking output. Equivalent to diff -b')),
                ('ignore_blank_lines', models.BooleanField(default=False, help_text='Ignore changes in blank lines when checking output. Equivalent to diff -B')),
                ('points_for_correct_return_code', models.IntegerField(default=0, help_text='The number of points to be awarded when this command\n                     produces the correct return_code', validators=[django.core.validators.MinValueValidator(0)])),
                ('points_for_correct_stdout', models.IntegerField(default=0, help_text='The number of points to be awarded when this command\n                     produces the correct stdout', validators=[django.core.validators.MinValueValidator(0)])),
                ('points_for_correct_stderr', models.IntegerField(default=0, help_text='The number of points to be awarded when this command\n                     produces the correct stderr', validators=[django.core.validators.MinValueValidator(0)])),
                ('deduction_for_wrong_return_code', models.IntegerField(default=0, help_text='The number of points to deduct when this command\n                     produces the wrong return code (this value must be negative).\n                     Note: The total points given for a single command may be negative,\n                     but the total points for an AGTestCase will be capped at zero.', validators=[django.core.validators.MaxValueValidator(0)])),
                ('deduction_for_wrong_stdout', models.IntegerField(default=0, help_text='The number of points to deduct when this command\n                     produces the wrong stdout (this value must be negative).\n                     Note: The total points given for a single command may be negative,\n                     but the total points for an AGTestCase will be capped at zero.', validators=[django.core.validators.MaxValueValidator(0)])),
                ('deduction_for_wrong_stderr', models.IntegerField(default=0, help_text='The number of points to deduct when this command\n                     produces the wrong stderr (this value must be negative).\n                     Note: The total points given for a single command may be negative,\n                     but the total points for an AGTestCase will be capped at zero.', validators=[django.core.validators.MaxValueValidator(0)])),
                ('time_limit', models.IntegerField(default=10, help_text='The time limit in seconds to be placed on the\n            command. This limit currently applies to each\n            of: compilation, running the program, and running the\n            program with Valgrind (the timeout is applied separately to\n            each).\n            Must be > 0\n            Must be <= autograder.shared.global_constants\n                                 .MAX_SUBPROCESS_TIMEOUT', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)])),
                ('stack_size_limit', models.IntegerField(default=10000000, help_text='\n        stack_size_limit -- The maximum stack size in bytes.\n            Must be > 0\n            Must be <= autograder.shared.global_constants.MAX_STACK_SIZE_LIMIT\n            NOTE: Setting this value too low may cause the command to crash prematurely.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100000000)])),
                ('virtual_memory_limit', models.IntegerField(default=500000000, help_text='The maximum amount of virtual memory\n            (in bytes) the command can use.\n            Must be > 0\n            Must be <= autograder.shared.global_constants.MAX_VIRTUAL_MEM_LIMIT\n            NOTE: Setting this value too low may cause the command to crash prematurely.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000000000)])),
                ('process_spawn_limit', models.IntegerField(default=0, help_text="The maximum number of processes that the command is allowed to spawn.\n            Must be >= 0\n            Must be <= autograder.shared.global_constants.MAX_PROCESS_LIMIT\n            NOTE: This limit applies cumulatively to the processes\n                    spawned by the main program being run. i.e. If a\n                    spawned process spawns it's own child process, both\n                    of those processes will count towards the main\n                    program's process limit.", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('ag_test_case', models.ForeignKey(help_text='When non-null, indicates that this command belongs to the specified\n                     autograder test.\n                     Either this field or ag_test_suite must be non-null.', on_delete=django.db.models.deletion.CASCADE, related_name='ag_test_commands', to='core.AGTestCase')),
            ],
            bases=(autograder.core.models.ag_model_base._AutograderModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestCommandFeedbackConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('visible', models.BooleanField(default=True)),
                ('return_code_fdbk_level', autograder.core.fields.EnumField(default=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel('no_feedback'), enum_type=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel)),
                ('stdout_fdbk_level', autograder.core.fields.EnumField(default=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel('no_feedback'), enum_type=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel)),
                ('stderr_fdbk_level', autograder.core.fields.EnumField(default=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel('no_feedback'), enum_type=autograder.core.models.ag_test.ag_test_command.ValueFeedbackLevel)),
                ('show_points', models.BooleanField(default=False)),
                ('show_actual_return_code', models.BooleanField(default=False)),
                ('show_actual_stdout', models.BooleanField(default=False)),
                ('show_actual_stderr', models.BooleanField(default=False)),
                ('show_whether_timed_out', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base._AutograderModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestCommandResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('return_code', models.IntegerField(blank=True, default=None, help_text='The return code of the completed command.', null=True)),
                ('stdout', models.TextField(blank=True, help_text='The stdout contents from running the command.')),
                ('stderr', models.TextField(blank=True, help_text='The stderr contents from running the command.')),
                ('timed_out', models.BooleanField(default=False, help_text='Whether the program exceeded the time limit.')),
                ('return_code_correct', models.NullBooleanField(default=None)),
                ('stdout_correct', models.NullBooleanField(default=None)),
                ('stderr_correct', models.NullBooleanField(default=None)),
                ('ag_test_case_result', models.ForeignKey(help_text="The AGTestCaseResult that this result belongs to.\n                     A value of None indicates that this AGTestCommandResult\n                     is the result of an AGTestSuite's setup command.", on_delete=django.db.models.deletion.CASCADE, related_name='ag_test_command_results', to='core.AGTestCaseResult')),
                ('ag_test_command', models.ForeignKey(help_text='The AGTestCommand this result belongs to.', on_delete=django.db.models.deletion.CASCADE, to='core.AGTestCommand')),
            ],
            bases=(autograder.core.models.ag_model_base._AutograderModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestSuite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', autograder.core.fields.ShortStringField(help_text='The name used to identify this suite.\n                     Must be non-empty and non-null.\n                     Must be unique among suites that belong to the same project.\n                     This field is REQUIRED.', max_length=255, strip=False)),
                ('read_only_project_files', models.BooleanField(default=True, help_text='When True, project files needed for this suite will be read only when this\n                     suite is run.')),
                ('setup_suite_cmd', autograder.core.fields.ShortStringField(blank=True, help_text="A command to be run before this suite's tests are run.\n                     This command is only run once at the beginning of the suite.\n                     This command will be run after the student and project files\n                     have been added to the sandbox.", max_length=255, strip=False)),
                ('teardown_suite_cmd', autograder.core.fields.ShortStringField(blank=True, help_text="A command to be run after this suite's tests are run.\n                     This command is only run once at the end of the suite.", max_length=255, strip=False)),
                ('setup_suite_cmd_name', autograder.core.fields.ShortStringField(blank=True, help_text="The name of this suite's setup command.", max_length=255, strip=False)),
                ('teardown_suite_cmd_name', autograder.core.fields.ShortStringField(blank=True, help_text="The name of this suite's teardown command.", max_length=255, strip=False)),
                ('docker_image_to_use', autograder.core.fields.ShortStringField(choices=[('jameslp/autograder-sandbox', 'jameslp/autograder-sandbox')], default='jameslp/autograder-sandbox', help_text='The name of the Docker image that the sandbox should be created using.', max_length=255, strip=False)),
                ('allow_network_access', models.BooleanField(default=False, help_text='Specifies whether the sandbox should allow commands run inside of it to\n                     make network calls outside of the sandbox.')),
                ('deferred', models.BooleanField(default=False, help_text='If true, this test suite can be graded asynchronously. Deferred suites that\n                     have yet to be graded do not prevent members of a group from submitting\n                     again.')),
            ],
            bases=(autograder.core.models.ag_model_base._AutograderModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestSuiteFeedbackConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('visible', models.BooleanField(default=True)),
                ('show_individual_tests', models.BooleanField(default=True, help_text='Whether to show information about individual tests in a suite or just a\n                     points summary (if available).')),
                ('show_setup_and_teardown_return_code', models.BooleanField(default=True)),
                ('show_setup_and_teardown_timed_out', models.BooleanField(default=True)),
                ('show_setup_and_teardown_stdout', models.BooleanField(default=True, help_text="Whether to show stdout content from a suite's setup and teardown commands.")),
                ('show_setup_and_teardown_stderr', models.BooleanField(default=True, help_text="Whether to show stderr content from a suite's setup and teardown commands.")),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base._AutograderModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGTestSuiteResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('setup_return_code', models.IntegerField(blank=True, default=None, help_text="The return code of this suite's setup command.", null=True)),
                ('setup_timed_out', models.BooleanField(default=False, help_text="Whether this suite's setup command took too long to run.")),
                ('setup_stdout', models.TextField(blank=True, help_text="The stdout content of this suite's setup command.")),
                ('setup_stderr', models.TextField(blank=True, help_text="The stderr content of this suite's setup command.")),
                ('teardown_return_code', models.IntegerField(blank=True, default=None, help_text="The return code of this suite's teardown command.", null=True)),
                ('teardown_timed_out', models.BooleanField(default=False, help_text="Whether this suite's teardown command took too long to run.")),
                ('teardown_stdout', models.TextField(blank=True, help_text="The stdout content of this suite's teardown command.")),
                ('teardown_stderr', models.TextField(blank=True, help_text="The stderr content of this suite's teardown command.")),
                ('ag_test_suite', models.ForeignKey(help_text='The AGTestSuite that this result belongs to.', on_delete=django.db.models.deletion.CASCADE, to='core.AGTestSuite')),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base._AutograderModelMixin, models.Model),
        ),
        migrations.RemoveField(
            model_name='project',
            name='allow_submissions_from_non_enrolled_students',
        ),
        migrations.RemoveField(
            model_name='project',
            name='ultimate_submission_selection_method',
        ),
        migrations.AddField(
            model_name='course',
            name='last_modified',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='expectedstudentfilepattern',
            name='last_modified',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='feedbackconfig',
            name='last_modified',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='notification',
            name='last_modified',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='project',
            name='guests_can_submit',
            field=models.BooleanField(default=False, help_text='By default, only admins, staff, and students\n            for a given Course can view and submit to its Projects.\n            When True, submissions will be accepted from guests\n            with the following caveats:\n                - Guests must be given a direct link to the project.\n                - When group work is allowed, guests can\n                only be in groups with other guests.'),
        ),
        migrations.AddField(
            model_name='project',
            name='last_modified',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='project',
            name='submission_limit_reset_timezone',
            field=timezone_field.fields.TimeZoneField(default='UTC', help_text='The timezone to use when computing how many\n            submissions a group has made in a 24 hour period.'),
        ),
        migrations.AddField(
            model_name='project',
            name='ultimate_submission_policy',
            field=autograder.core.fields.EnumField(blank=True, default=autograder.core.models.project.project.UltimateSubmissionPolicy('most_recent'), enum_type=autograder.core.models.project.project.UltimateSubmissionPolicy, help_text='The "ultimate" submission for a group is the one\n            that will be used for final grading. This field specifies\n            how the ultimate submission should be determined.'),
        ),
        migrations.AddField(
            model_name='submission',
            name='last_modified',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='submissiongroup',
            name='last_modified',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='submissiongroupinvitation',
            name='last_modified',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='uploadedfile',
            name='last_modified',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='autogradertestcasebase',
            name='entry_point_filename',
            field=autograder.core.fields.ShortStringField(blank=True, help_text='The name of a file that should be given to the\n            interpreter as the program to be run, i.e. the main source\n            module. It is up to the user to make sure that this file is\n            either a project or student resource file for this test.', max_length=255, strip=False, validators=[autograder.core.utils.check_filename]),
        ),
        migrations.AlterField(
            model_name='autogradertestcasebase',
            name='executable_name',
            field=autograder.core.fields.ShortStringField(blank=True, default=autograder.core.models.autograder_test_case.autograder_test_case_base.get_random_executable_name, help_text='The name of the executable program that should be\n            produced by the compiler. This is the program that will be\n            tested.', max_length=255, strip=False, validators=[autograder.core.utils.check_filename]),
        ),
        migrations.AlterField(
            model_name='autogradertestcasebase',
            name='expected_standard_error_output',
            field=models.TextField(blank=True, help_text='A string whose contents should be compared to the\n            standard error output of the program being tested. A value\n            of the empty string indicates that this test case should not\n            check the standard error output of the program being\n            tested.', validators=[django.core.validators.MaxLengthValidator(8000000)]),
        ),
        migrations.AlterField(
            model_name='autogradertestcasebase',
            name='expected_standard_output',
            field=models.TextField(blank=True, help_text='A string whose contents should be compared to the\n            standard output of the program being tested. A value of the\n            empty string indicates that this test case should not check\n            the standard output of the program being tested.', validators=[django.core.validators.MaxLengthValidator(8000000)]),
        ),
        migrations.AlterField(
            model_name='expectedstudentfilepattern',
            name='pattern',
            field=autograder.core.fields.ShortStringField(help_text="A shell-style file pattern suitable for\n            use with Python's fnmatch.fnmatch()\n            function (https://docs.python.org/3.5/library/fnmatch.html)\n            This string must be a legal UNIX filename and may not be\n            '..' or '.'.\n            NOTE: Patterns for a given project must not overlap,\n                otherwise the behavior is undefined.", max_length=255, strip=False, validators=[autograder.core.utils.check_filename]),
        ),
        migrations.AlterField(
            model_name='project',
            name='submission_limit_reset_time',
            field=models.TimeField(default=datetime.time, help_text='The time that marks the beginning and end of the 24\n            hour period during which submissions should be counted\n            towards the daily limit. Defaults to 0:0:0.'),
        ),
        migrations.AddField(
            model_name='agtestsuiteresult',
            name='submission',
            field=models.ForeignKey(help_text='The Submission that this result is for.', on_delete=django.db.models.deletion.CASCADE, related_name='ag_test_suite_results', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='agtestsuite',
            name='normal_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_suite.make_default_suite_fdbk, help_text='Feedback settings for a normal submission.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestSuiteFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestsuite',
            name='past_limit_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_suite.make_default_suite_fdbk, help_text='Feedback settings for a submission that is past the daily limit.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestSuiteFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestsuite',
            name='project',
            field=models.ForeignKey(help_text='The project this suite belongs to.\n                                             This field is REQUIRED.', on_delete=django.db.models.deletion.CASCADE, related_name='ag_test_suites', to='core.Project'),
        ),
        migrations.AddField(
            model_name='agtestsuite',
            name='project_files_needed',
            field=models.ManyToManyField(help_text="The project files that will be copied into the sandbox before the suite's\n                     tests are run.", to='core.UploadedFile'),
        ),
        migrations.AddField(
            model_name='agtestsuite',
            name='staff_viewer_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_suite.make_default_suite_fdbk, help_text='Feedback settings for a staff member viewing a submission from another group.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestSuiteFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestsuite',
            name='student_files_needed',
            field=models.ManyToManyField(help_text="Student-submitted files matching these patterns will be copied into the\n                     sandbox before the suite's tests are run.", to='core.ExpectedStudentFilePattern'),
        ),
        migrations.AddField(
            model_name='agtestsuite',
            name='ultimate_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_suite.make_default_suite_fdbk, help_text='Feedback settings for an ultimate submission.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestSuiteFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='expected_stderr_project_file',
            field=models.ForeignKey(blank=True, default=None, help_text="An UploadedFile whose contents should be compared against this command's\n                     stderr. This value is used (and may not be null) when expected_stderr_source\n                     is ExpectedOutputSource.project_file and is ignored otherwise.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.UploadedFile'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='expected_stdout_project_file',
            field=models.ForeignKey(blank=True, default=None, help_text="An UploadedFile whose contents should be compared against this command's\n                     stdout. This value is used (and may not be null) when expected_stdout_source\n                     is ExpectedOutputSource.project_file and is ignored otherwise.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.UploadedFile'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='normal_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_default_command_fdbk, help_text='Feedback settings for a normal Submission.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='past_limit_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_default_command_fdbk, help_text='Feedback settings for a Submission that is past the daily limit.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='staff_viewer_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_max_command_fdbk, help_text='Feedback settings for a staff member viewing a Submission from another group.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='stdin_project_file',
            field=models.ForeignKey(blank=True, default=None, help_text='An UploadedFile whose contents should be redirected to the stdin of this\n                     command. This value is used when stdin_source is StdinSource.project_file\n                     and is ignored otherwise.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.UploadedFile'),
        ),
        migrations.AddField(
            model_name='agtestcommand',
            name='ultimate_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_default_ultimate_submission_command_fdbk, help_text='Feedback settings for an ultimate Submission.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcaseresult',
            name='ag_test_suite_result',
            field=models.ForeignKey(help_text='The AGTestSuiteResult that this result belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='ag_test_case_results', to='core.AGTestSuiteResult'),
        ),
        migrations.AddField(
            model_name='agtestcase',
            name='ag_test_suite',
            field=models.ForeignKey(help_text='The suite this autograder test belongs to.\n                     This field is REQUIRED.', on_delete=django.db.models.deletion.CASCADE, related_name='ag_test_cases', to='core.AGTestSuite'),
        ),
        migrations.AddField(
            model_name='agtestcase',
            name='normal_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_case.make_default_test_fdbk, help_text='Feedback settings for a normal Submission.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestCaseFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcase',
            name='past_limit_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_case.make_default_test_fdbk, help_text='Feedback settings for a Submission that is past the daily limit.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestCaseFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcase',
            name='staff_viewer_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_case.make_default_test_fdbk, help_text='Feedback settings for a staff member viewing a Submission from another group.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestCaseFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='agtestcase',
            name='ultimate_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_case.make_default_test_fdbk, help_text='Feedback settings for an ultimate Submission.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.AGTestCaseFeedbackConfig'),
        ),
        migrations.AlterUniqueTogether(
            name='agtestsuite',
            unique_together=set([('name', 'project')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='agtestsuite',
            order_with_respect_to='project',
        ),
        migrations.AlterUniqueTogether(
            name='agtestcommandresult',
            unique_together=set([('ag_test_command', 'ag_test_case_result')]),
        ),
        migrations.AlterUniqueTogether(
            name='agtestcommand',
            unique_together=set([('name', 'ag_test_case')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='agtestcommand',
            order_with_respect_to='ag_test_case',
        ),
        migrations.AlterUniqueTogether(
            name='agtestcase',
            unique_together=set([('name', 'ag_test_suite')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='agtestcase',
            order_with_respect_to='ag_test_suite',
        ),
    ]
