# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-04-17 16:28
from __future__ import unicode_literals

import autograder.core.models.ag_model_base
import autograder.core.models.project.uploaded_file
import autograder.core.models.student_test_suite.student_test_suite_base
import autograder.core.shared.feedback_configuration
import autograder.core.shared.utilities
import autograder.utilities.fields
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re


class Migration(migrations.Migration):

    # replaces = [('core', '0001_initial'), ('core', '0002_auto_20160112_0030'), ('core', '0003_auto_20160112_0437'), ('core', '0004_auto_20160214_2249'), ('core', '0005_auto_20160321_0055'), ('core', '0006_auto_20160322_0107'), ('core', '0007_auto_20160323_0313'), ('core', '0008_auto_20160329_0236'), ('core', '0009_auto_20160411_0231'), ('core', '0010_auto_20160411_0303'), ('core', '0011_auto_20160417_0042'), ('core', '0012_auto_20160417_0046'), ('core', '0013_auto_20160417_0151'), ('core', '0014_requiredstudentfile'), ('core', '0015_auto_20160417_0157'), ('core', '0016_auto_20160417_0158'), ('core', '0017_auto_20160417_0204'), ('core', '0018_auto_20160417_0211'), ('core', '0019_auto_20160417_0213'), ('core', '0020_uploadedfile'), ('core', '0021_auto_20160417_0311'), ('core', '0022_auto_20160417_0312'), ('core', '0023_auto_20160417_0340'), ('core', '0024_auto_20160417_1519'), ('core', '0025_auto_20160417_1628')]

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AutograderTestCaseResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('return_code', models.IntegerField(default=None, null=True)),
                ('standard_output', models.TextField()),
                ('standard_error_output', models.TextField()),
                ('timed_out', models.BooleanField(default=False)),
                ('valgrind_return_code', models.IntegerField(default=None, null=True)),
                ('valgrind_output', models.TextField()),
                ('compilation_return_code', models.IntegerField(default=None, null=True)),
                ('compilation_standard_output', models.TextField()),
                ('compilation_standard_error_output', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('administrators', models.ManyToManyField(related_name='courses_is_admin_for', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('message', models.CharField(max_length=500)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PolymorphicModelValidatableOnSave',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('visible_to_students', models.BooleanField(default=False)),
                ('closing_time', models.DateTimeField(blank=True, default=None, null=True)),
                ('disallow_student_submissions', models.BooleanField(default=False)),
                ('allow_submissions_from_non_enrolled_students', models.BooleanField(default=False)),
                ('min_group_size', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('max_group_size', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('_uploaded_filenames', autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, max_string_length=255, size=None, string_validators=[], strip_strings=True)),
                ('_required_student_files', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), blank=True, default=list, size=None)),
                ('_expected_student_file_patterns', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list)),
            ],
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='semesters', to='core.Course')),
                ('enrolled_students', models.ManyToManyField(related_name='semesters_is_enrolled_in', to=settings.AUTH_USER_MODEL)),
                ('staff', models.ManyToManyField(related_name='semesters_is_staff_for', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_submitted_filenames', autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, max_string_length=255, size=None, string_validators=[], strip_strings=True)),
                ('discarded_files', autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, max_string_length=255, size=None, string_validators=[], strip_strings=True)),
                ('_timestamp', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('received', 'Received'), ('queued', 'Queued'), ('being_graded', 'Being graded'), ('finished_grading', 'Finished grading'), ('invalid', 'Invalid'), ('error', 'Error')], default='received', max_length=255)),
                ('invalid_reason_or_error', django.contrib.postgres.fields.jsonb.JSONField(default=list)),
            ],
            options={
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='SubmissionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extended_due_date', models.DateTimeField(blank=True, default=None, null=True)),
                ('members', models.ManyToManyField(related_name='groups_is_member_of', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submission_groups', to='core.Project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubmissionGroupInvitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_invitees_who_accepted', autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, max_string_length=255, size=None, string_validators=[], strip_strings=True)),
                ('invitation_creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_invitations_sent', to=settings.AUTH_USER_MODEL)),
                ('invited_users', models.ManyToManyField(related_name='group_invitations_received', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AutograderTestCaseBase',
            fields=[
                ('polymorphicmodelvalidatableonsave_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.PolymorphicModelValidatableOnSave')),
                ('name', autograder.utilities.fields.ShortStringField(max_length=255, strip=True)),
                ('command_line_arguments', autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, max_string_length=255, size=None, string_validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9-_=.]+$', 32))], strip_strings=True)),
                ('standard_input', models.TextField(blank=True)),
                ('test_resource_files', autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=[], max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('student_resource_files', autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=[], max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('time_limit', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)])),
                ('expected_return_code', models.IntegerField(blank=True, default=None, null=True)),
                ('expect_any_nonzero_return_code', models.BooleanField(default=False)),
                ('expected_standard_output', models.TextField(blank=True)),
                ('expected_standard_error_output', models.TextField(blank=True)),
                ('_use_valgrind', models.BooleanField(default=False)),
                ('valgrind_flags', autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=None, max_string_length=255, null=True, size=None, string_validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9-_=.]+$', 32))], strip_strings=True)),
                ('points_for_correct_return_code', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('points_for_correct_output', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('deduction_for_valgrind_errors', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('points_for_compilation_success', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('feedback_configuration', autograder.utilities.fields.JsonSerializableClassField(class_=autograder.core.shared.feedback_configuration.AutograderTestCaseFeedbackConfiguration, default=autograder.core.shared.feedback_configuration.AutograderTestCaseFeedbackConfiguration)),
                ('post_deadline_final_submission_feedback_configuration', autograder.utilities.fields.JsonSerializableClassField(blank=True, class_=autograder.core.shared.feedback_configuration.AutograderTestCaseFeedbackConfiguration, default=None, null=True)),
            ],
            bases=('core.polymorphicmodelvalidatableonsave',),
        ),
        migrations.CreateModel(
            name='StudentTestSuiteBase',
            fields=[
                ('polymorphicmodelvalidatableonsave_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.PolymorphicModelValidatableOnSave')),
                ('name', models.CharField(max_length=255)),
                ('student_test_case_filename_pattern', models.CharField(max_length=255)),
                ('correct_implementation_filename', models.CharField(max_length=255)),
                ('buggy_implementation_filenames', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), blank=True, default=list, size=None)),
                ('implementation_file_alias', autograder.utilities.fields.ShortStringField(blank=True, max_length=255, strip=True, validators=[autograder.core.models.student_test_suite.student_test_suite_base._validate_implementation_file_alias])),
                ('suite_resource_filenames', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), blank=True, default=list, size=None)),
                ('time_limit', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)])),
                ('hide_from_students', models.BooleanField(default=True)),
                ('points_per_buggy_implementation_exposed', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('feedback_configuration', autograder.utilities.fields.JsonSerializableClassField(class_=autograder.core.shared.feedback_configuration.StudentTestSuiteFeedbackConfiguration, default=autograder.core.shared.feedback_configuration.StudentTestSuiteFeedbackConfiguration)),
                ('post_deadline_final_submission_feedback_configuration', autograder.utilities.fields.JsonSerializableClassField(blank=True, class_=autograder.core.shared.feedback_configuration.StudentTestSuiteFeedbackConfiguration, default=None, null=True)),
            ],
            bases=('core.polymorphicmodelvalidatableonsave',),
        ),
        migrations.AddField(
            model_name='submission',
            name='submission_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='core.SubmissionGroup'),
        ),
        migrations.AddField(
            model_name='project',
            name='semester',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='core.Semester'),
        ),
        migrations.AddField(
            model_name='polymorphicmodelvalidatableonsave',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_core.polymorphicmodelvalidatableonsave_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='autogradertestcaseresult',
            name='submission',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='results', to='core.Submission'),
        ),
        migrations.CreateModel(
            name='CompilationOnlyAutograderTestCase',
            fields=[
                ('autogradertestcasebase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.AutograderTestCaseBase')),
                ('compiler', autograder.utilities.fields.ShortStringField(choices=[('g++', 'g++'), ('clang++', 'clang++'), ('gcc', 'gcc'), ('clang', 'clang')], max_length=255, strip=False)),
                ('compiler_flags', autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, max_string_length=255, size=None, string_validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9-_=.+]+$', 32))], strip_strings=True)),
                ('project_files_to_compile_together', autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('student_files_to_compile_together', autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('executable_name', autograder.utilities.fields.ShortStringField(default='compiled_program', max_length=255, strip=False, validators=[autograder.core.shared.utilities.check_user_provided_filename])),
            ],
            options={
                'abstract': False,
            },
            bases=('core.autogradertestcasebase',),
        ),
        migrations.CreateModel(
            name='CompiledAndRunAutograderTestCase',
            fields=[
                ('autogradertestcasebase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.AutograderTestCaseBase')),
                ('compiler', autograder.utilities.fields.ShortStringField(choices=[('g++', 'g++'), ('clang++', 'clang++'), ('gcc', 'gcc'), ('clang', 'clang')], max_length=255, strip=False)),
                ('compiler_flags', autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, max_string_length=255, size=None, string_validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9-_=.+]+$', 32))], strip_strings=True)),
                ('project_files_to_compile_together', autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('student_files_to_compile_together', autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('executable_name', autograder.utilities.fields.ShortStringField(default='compiled_program', max_length=255, strip=False, validators=[autograder.core.shared.utilities.check_user_provided_filename])),
            ],
            options={
                'abstract': False,
            },
            bases=('core.autogradertestcasebase',),
        ),
        migrations.CreateModel(
            name='InterpretedAutograderTestCase',
            fields=[
                ('autogradertestcasebase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.AutograderTestCaseBase')),
                ('interpreter', autograder.utilities.fields.ShortStringField(choices=[('python', 'python'), ('python3', 'python3')], max_length=255, strip=False)),
                ('interpreter_flags', autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, max_string_length=255, size=None, string_validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9-_=.+]+$', 32))], strip_strings=True)),
                ('entry_point_filename', autograder.utilities.fields.ShortStringField(max_length=255, strip=False)),
            ],
            options={
                'abstract': False,
            },
            bases=('core.autogradertestcasebase',),
        ),
        migrations.AddField(
            model_name='studenttestsuitebase',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_test_suites', to='core.Project'),
        ),
        migrations.AlterUniqueTogether(
            name='semester',
            unique_together=set([('name', 'course')]),
        ),
        migrations.AlterUniqueTogether(
            name='project',
            unique_together=set([('name', 'semester')]),
        ),
        migrations.AddField(
            model_name='autogradertestcaseresult',
            name='test_case',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.AutograderTestCaseBase'),
        ),
        migrations.AddField(
            model_name='autogradertestcasebase',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='autograder_test_cases', to='core.Project'),
        ),
        migrations.AlterField(
            model_name='studenttestsuitebase',
            name='implementation_file_alias',
            field=autograder.utilities.fields.ShortStringField(blank=True, max_length=255, strip=False, validators=[autograder.core.models.student_test_suite.student_test_suite_base._validate_implementation_file_alias]),
        ),
        migrations.AlterUniqueTogether(
            name='studenttestsuitebase',
            unique_together=set([('name', 'project')]),
        ),
        migrations.AddField(
            model_name='autogradertestcasebase',
            name='allow_network_connections',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='autogradertestcasebase',
            name='command_line_arguments',
            field=autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, max_string_length=255, size=None, string_validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9-_=.+]+$', 32))], strip_strings=True),
        ),
        migrations.AlterField(
            model_name='autogradertestcasebase',
            name='valgrind_flags',
            field=autograder.utilities.fields.StringArrayField(allow_empty_strings=False, blank=True, default=None, max_string_length=255, null=True, size=None, string_validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9-_=.+]+$', 32))], strip_strings=True),
        ),
        migrations.AddField(
            model_name='autogradertestcasebase',
            name='process_spawn_limit',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AddField(
            model_name='autogradertestcasebase',
            name='stack_size_limit',
            field=models.IntegerField(default=10000000, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100000000)]),
        ),
        migrations.AddField(
            model_name='autogradertestcasebase',
            name='virtual_memory_limit',
            field=models.IntegerField(default=500000000, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000000000)]),
        ),
        migrations.RemoveField(
            model_name='autogradertestcasebase',
            name='points_for_correct_output',
        ),
        migrations.AddField(
            model_name='autogradertestcasebase',
            name='points_for_correct_stderr',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='autogradertestcasebase',
            name='points_for_correct_stdout',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterUniqueTogether(
            name='autogradertestcasebase',
            unique_together=set([('name', 'project')]),
        ),
        migrations.AlterModelOptions(
            name='submission',
            options={'ordering': ['-pk']},
        ),
        migrations.AlterField(
            model_name='submission',
            name='status',
            field=models.CharField(choices=[('received', 'Received'), ('queued', 'Queued'), ('being_graded', 'Being graded'), ('finished_grading', 'Finished grading'), ('invalid', 'Invalid'), ('error', 'Error'), ('removed_from_queue', 'Removed from queue')], default='received', max_length=255),
        ),
        migrations.AlterField(
            model_name='course',
            name='administrators',
            field=models.ManyToManyField(help_text='The Users that are administrators for this Course. Administrators have edit access to this Course and its Semesters.', related_name='courses_is_admin_for', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='course',
            name='name',
            field=models.CharField(help_text='The name of this course. Must be unique, non-empty and non-null.', max_length=255, unique=True, validators=[django.core.validators.MinLengthValidator(1)]),
        ),
        migrations.AlterField(
            model_name='course',
            name='administrators',
            field=models.ManyToManyField(help_text='The Users that are administrators for\n                  this Course. Administrators have edit access\n                  to this Course and its Semesters.', related_name='courses_is_admin_for', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='course',
            name='name',
            field=models.CharField(help_text='The name of this course.\n                  Must be unique, non-empty and non-null.', max_length=255, unique=True, validators=[django.core.validators.MinLengthValidator(1)]),
        ),
        migrations.AlterField(
            model_name='semester',
            name='course',
            field=models.ForeignKey(help_text='The Course that this semester belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='semesters', to='core.Course'),
        ),
        migrations.AlterField(
            model_name='semester',
            name='enrolled_students',
            field=models.ManyToManyField(help_text='Users that are enrolled in this Semester.\n                  Enrolled students can view all visible Projects\n                  associated with this Semester and may be in\n                  SubmissionGroups together.', related_name='semesters_is_enrolled_in', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='semester',
            name='name',
            field=models.CharField(help_text='The name used to identify this Semester.\n                  Must be non-empty and non-null.\n                  Must be unique among Semesters associated with a\n                  given Course.', max_length=255, validators=[django.core.validators.MinLengthValidator(1)]),
        ),
        migrations.AlterField(
            model_name='semester',
            name='staff',
            field=models.ManyToManyField(help_text='Users that are staff members for this Semester.\n            Staff members receive full feedback on autograder test\n            cases and can view student submissions.', related_name='semesters_is_staff_for', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ExpectedStudentFilePattern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pattern', autograder.utilities.fields.ShortStringField(help_text="A shell-style file pattern suitable for\n            use with Python's fnmatch.fnmatch()\n            function (https://docs.python.org/3.4/library/fnmatch.html)\n            This string may contain the same characters allowed in\n            project or student files as well as special pattern\n            matching characters. This string must not be empty.", max_length=255, strip=False, validators=[django.core.validators.RegexValidator(re.compile('[a-zA-Z0-9-_.\\*\\[\\]\\?\\!]+', 32))])),
                ('min_num_matches', models.IntegerField(help_text='The minimum number of submitted student files that\n            should match the pattern. Must be non-negative.', validators=[django.core.validators.MinValueValidator(0)])),
                ('max_num_matches', models.IntegerField(help_text='The maximum number of submitted student files that\n            can match the pattern. Must be >= min_num_matches')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Project')),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base._AutograderModelMixin, models.Model),
        ),
        migrations.AlterField(
            model_name='autogradertestcasebase',
            name='name',
            field=autograder.utilities.fields.ShortStringField(max_length=255, strip=False),
        ),
        migrations.AlterField(
            model_name='course',
            name='name',
            field=autograder.utilities.fields.ShortStringField(help_text='The name of this course.\n                  Must be unique, non-empty and non-null.', max_length=255, strip=False, unique=True, validators=[django.core.validators.MinLengthValidator(1)]),
        ),
        migrations.AlterField(
            model_name='semester',
            name='name',
            field=autograder.utilities.fields.ShortStringField(help_text='The name used to identify this Semester.\n                  Must be non-empty and non-null.\n                  Must be unique among Semesters associated with a\n                  given Course.', max_length=255, strip=False, validators=[django.core.validators.MinLengthValidator(1)]),
        ),
        migrations.AlterUniqueTogether(
            name='expectedstudentfilepattern',
            unique_together=set([('pattern', 'project')]),
        ),
        migrations.AlterField(
            model_name='expectedstudentfilepattern',
            name='pattern',
            field=autograder.utilities.fields.ShortStringField(help_text="A shell-style file pattern suitable for\n            use with Python's fnmatch.fnmatch()\n            function (https://docs.python.org/3.4/library/fnmatch.html)\n            This string may contain the same characters allowed in\n            project or student files as well as special pattern\n            matching characters. This string must not be empty.", max_length=255, strip=False, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9-_.\\*\\[\\]\\?\\!]+$', 32))]),
        ),
        migrations.AlterField(
            model_name='expectedstudentfilepattern',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expected_student_file_patterns', to='core.Project'),
        ),
        migrations.CreateModel(
            name='RequiredStudentFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', autograder.utilities.fields.ShortStringField(help_text='See\n            autograder.shared.utilities.check_user_provided_filename\n            for restrictions on the character set used for filenames.\n            ', max_length=255, strip=False, validators=[django.core.validators.RegexValidator(re.compile('[a-zA-Z][a-zA-Z0-9-_.]*|^$', 32))])),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='required_student_files', to='core.Project')),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base._AutograderModelMixin, models.Model),
        ),
        migrations.RemoveField(
            model_name='project',
            name='_expected_student_file_patterns',
        ),
        migrations.RemoveField(
            model_name='project',
            name='_required_student_files',
        ),
        migrations.AlterUniqueTogether(
            name='requiredstudentfile',
            unique_together=set([('project', 'filename')]),
        ),
        migrations.AlterField(
            model_name='requiredstudentfile',
            name='filename',
            field=autograder.utilities.fields.ShortStringField(help_text='See check_user_provided_filename comments\n            for restrictions on the character set used for filenames.\n            ', max_length=255, strip=False, validators=[autograder.core.shared.utilities.check_user_provided_filename]),
        ),
        migrations.AlterField(
            model_name='expectedstudentfilepattern',
            name='pattern',
            field=autograder.utilities.fields.ShortStringField(help_text="A shell-style file pattern suitable for\n            use with Python's fnmatch.fnmatch()\n            function (https://docs.python.org/3.4/library/fnmatch.html)\n            This string may contain the same characters allowed in\n            project or student files as well as special pattern\n            matching characters. This string must not be empty.", max_length=255, strip=False, validators=[autograder.core.shared.utilities.check_shell_style_file_pattern]),
        ),
        migrations.CreateModel(
            name='UploadedFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_obj', models.FileField(max_length=510, upload_to=autograder.core.models.project.uploaded_file._get_project_file_upload_to_dir, validators=[autograder.core.models.project.uploaded_file._validate_filename])),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_files', to='core.Project')),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base._AutograderModelMixin, models.Model),
        ),
        migrations.RemoveField(
            model_name='project',
            name='_uploaded_filenames',
        ),
        migrations.AlterField(
            model_name='project',
            name='allow_submissions_from_non_enrolled_students',
            field=models.BooleanField(default=False, help_text='By default, only staff members and enrolled\n            students for a given Semester can submit to its Projects.\n            When this field is set to True, submissions will be accepted\n            from any authenticated Users, with the following caveats:\n                - In order to view the Project, non-enrolled students\n                must be given a direct link to a page where it can\n                be viewed.\n                - When group work is allowed, non-enrolled students can\n                only be in groups with other non-enrolled students.'),
        ),
        migrations.AlterField(
            model_name='project',
            name='closing_time',
            field=models.DateTimeField(blank=True, default=None, help_text='The date and time that this project should stop\n            accepting submissions.\n            A value of None indicates that this project should\n            stay open.', null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='disallow_student_submissions',
            field=models.BooleanField(default=False, help_text='A hard override that will prevent\n            students from submitting even if visible_to_students is\n            True and it is before closing_time.'),
        ),
        migrations.AlterField(
            model_name='project',
            name='max_group_size',
            field=models.IntegerField(default=1, help_text='The maximum number of students that can work in a\n            group on this project.\n            Must be >= 1.\n            Must be >= min_group_size.', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='project',
            name='min_group_size',
            field=models.IntegerField(default=1, help_text='The minimum number of students that can work in a\n            group on this project.\n            Must be >= 1.\n            Must be <= max_group_size.', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='project',
            name='name',
            field=autograder.utilities.fields.ShortStringField(help_text='The name used to identify this project.\n            Must be non-empty and non-null.\n            Must be unique among Projects associated with\n            a given semester.\n            This field is REQUIRED.', max_length=255, strip=False),
        ),
        migrations.AlterField(
            model_name='project',
            name='semester',
            field=models.ForeignKey(help_text='The Semester this project belongs to.\n            This field is REQUIRED.', on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='core.Semester'),
        ),
        migrations.AlterField(
            model_name='project',
            name='visible_to_students',
            field=models.BooleanField(default=False, help_text='Whether information about this Project can\n            be viewed by students.'),
        ),
        migrations.CreateModel(
            name='FeedbackConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ag_test_name_fdbk', autograder.utilities.fields.ShortStringField(choices=[], max_length=255, strip=False)),
                ('return_code_fdbk', autograder.utilities.fields.ShortStringField(choices=[], max_length=255, strip=False)),
                ('stdout_fdbk', autograder.utilities.fields.ShortStringField(choices=[], max_length=255, strip=False)),
                ('stderr_fdbk', autograder.utilities.fields.ShortStringField(choices=[], max_length=255, strip=False)),
                ('compilation_fdbk', autograder.utilities.fields.ShortStringField(choices=[], max_length=255, strip=False)),
                ('valgrind_fdbk', autograder.utilities.fields.ShortStringField(choices=[], max_length=255, strip=False)),
                ('points_fdbk', autograder.utilities.fields.ShortStringField(choices=[], max_length=255, strip=False)),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base._AutograderModelMixin, models.Model),
        ),
        migrations.AlterField(
            model_name='autogradertestcasebase',
            name='name',
            field=autograder.utilities.fields.ShortStringField(help_text='The name used to identify this test case.\n            Must be non-empty and non-null.\n            Must be unique among test cases associated with a given\n            project.', max_length=255, strip=False),
        ),
        migrations.AddField(
            model_name='feedbackconfig',
            name='ag_test',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.AutograderTestCaseBase'),
        ),
        migrations.AlterField(
            model_name='feedbackconfig',
            name='ag_test_name_fdbk',
            field=autograder.utilities.fields.ShortStringField(choices=[('randomly_obfuscate_name', 'randomly_obfuscate_name'), ('deterministically_obfuscate_name', 'deterministically_obfuscate_name'), ('show_real_name', 'show_real_name')], default='show_real_name', max_length=255, strip=False),
        ),
        migrations.AlterField(
            model_name='feedbackconfig',
            name='compilation_fdbk',
            field=autograder.utilities.fields.ShortStringField(choices=[('no_feedback', 'no_feedback'), ('success_or_failure_only', 'success_or_failure_only'), ('show_compiler_output', 'show_compiler_output')], default='no_feedback', max_length=255, strip=False),
        ),
        migrations.AlterField(
            model_name='feedbackconfig',
            name='points_fdbk',
            field=autograder.utilities.fields.ShortStringField(choices=[('hide', 'hide'), ('show_breakdown', 'show_breakdown')], default='hide', max_length=255, strip=False),
        ),
        migrations.AlterField(
            model_name='feedbackconfig',
            name='return_code_fdbk',
            field=autograder.utilities.fields.ShortStringField(choices=[('no_feedback', 'no_feedback'), ('correct_or_incorrect_only', 'correct_or_incorrect_only'), ('show_expected_and_actual_values', 'show_expected_and_actual_values')], default='no_feedback', max_length=255, strip=False),
        ),
        migrations.AlterField(
            model_name='feedbackconfig',
            name='stderr_fdbk',
            field=autograder.utilities.fields.ShortStringField(choices=[('no_feedback', 'no_feedback'), ('correct_or_incorrect_only', 'correct_or_incorrect_only'), ('show_expected_and_actual_values', 'show_expected_and_actual_values')], default='no_feedback', max_length=255, strip=False),
        ),
        migrations.AlterField(
            model_name='feedbackconfig',
            name='stdout_fdbk',
            field=autograder.utilities.fields.ShortStringField(choices=[('no_feedback', 'no_feedback'), ('correct_or_incorrect_only', 'correct_or_incorrect_only'), ('show_expected_and_actual_values', 'show_expected_and_actual_values')], default='no_feedback', max_length=255, strip=False),
        ),
        migrations.AlterField(
            model_name='feedbackconfig',
            name='valgrind_fdbk',
            field=autograder.utilities.fields.ShortStringField(choices=[('no_feedback', 'no_feedback'), ('errors_or_no_errors_only', 'errors_or_no_errors_only'), ('show_valgrind_output', 'show_valgrind_output')], default='no_feedback', max_length=255, strip=False),
        ),
        migrations.AlterField(
            model_name='submission',
            name='invalid_reason_or_error',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=list),
        ),
    ]
