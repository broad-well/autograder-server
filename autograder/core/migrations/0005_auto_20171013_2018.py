# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-10-13 20:18
from __future__ import unicode_literals

import autograder.core.constants
import autograder.core.fields
import autograder.core.models.ag_command.ag_command_base
import autograder.core.models.ag_model_base
import autograder.core.models.ag_test.ag_test_case
import autograder.core.models.ag_test.ag_test_command
import autograder.core.models.ag_test.ag_test_suite
import autograder.core.models.student_test_suite.student_test_suite
import autograder.core.models.student_test_suite.student_test_suite_result
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_agtestsuite_docker_image_to_use'),
    ]

    operations = [
        migrations.CreateModel(
            name='AGCommand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', autograder.core.fields.ShortStringField(blank=True, help_text='An optional name for this command.', max_length=255, strip=False)),
                ('cmd', models.CharField(help_text='A string containing the command to be run.\n                     Note: This string will be split using shlex.split() before it is executed.\n                     Note: This string defaults to the "true" command\n                     (which does nothing and returns 0) so that AGCommands are\n                     default-creatable.', max_length=1000)),
                ('stdin_source', autograder.core.fields.EnumField(default=autograder.core.models.ag_test.ag_test_command.StdinSource('none'), enum_type=autograder.core.models.ag_test.ag_test_command.StdinSource, help_text='Specifies what kind of source stdin will be redirected from.')),
                ('stdin_text', models.TextField(blank=True, help_text='A string whose contents should be redirected to the stdin of this command.\n                     This value is used when stdin_source is StdinSource.text and is ignored\n                     otherwise.')),
                ('time_limit', models.IntegerField(default=10, help_text='The time limit in seconds to be placed on the\n            command.\n            Must be > 0\n            Must be <= autograder.shared.global_constants\n                                 .MAX_SUBPROCESS_TIMEOUT', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)])),
                ('stack_size_limit', models.IntegerField(default=10000000, help_text='\n        stack_size_limit -- The maximum stack size in bytes.\n            Must be > 0\n            Must be <= autograder.shared.global_constants.MAX_STACK_SIZE_LIMIT\n            NOTE: Setting this value too low may cause the command to crash prematurely.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100000000)])),
                ('virtual_memory_limit', models.IntegerField(default=500000000, help_text='The maximum amount of virtual memory\n            (in bytes) the command can use.\n            Must be > 0\n            Must be <= autograder.shared.global_constants.MAX_VIRTUAL_MEM_LIMIT\n            NOTE: Setting this value too low may cause the command to crash prematurely.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2000000000)])),
                ('process_spawn_limit', models.IntegerField(default=0, help_text="The maximum number of processes that the command is allowed to spawn.\n            Must be >= 0\n            Must be <= autograder.shared.global_constants.MAX_PROCESS_LIMIT\n            NOTE: This limit applies cumulatively to the processes\n                    spawned by the main program being run. i.e. If a\n                    spawned process spawns it's own child process, both\n                    of those processes will count towards the main\n                    program's process limit.", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(16)])),
                ('stdin_project_file', models.ForeignKey(blank=True, default=None, help_text='An UploadedFile whose contents should be redirected to the stdin of this\n                     command. This value is used when stdin_source is StdinSource.instructor_file\n                     and is ignored otherwise.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.UploadedFile')),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AGCommandResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('return_code', models.IntegerField(blank=True, default=None, help_text='"The return code of the completed command. A value of None\n                      for a completed usually is caused by the the command timing out.', null=True)),
                ('timed_out', models.BooleanField(default=False, help_text='Whether the command exceeded its time limit.')),
                ('stdout_truncated', models.BooleanField(default=False, help_text="Whether the command's stdout was truncated.")),
                ('stderr_truncated', models.BooleanField(default=False, help_text="Whether the command's stderr was truncated.")),
                ('_stdout_filename', models.TextField(blank=True)),
                ('_stderr_filename', models.TextField(blank=True)),
                ('ag_command', models.ForeignKey(blank=True, default=None, help_text="The AGCommand this result belongs to, or None if this result doesn't belong to a command or if its command has been deleted.", null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.AGCommand')),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StudentTestSuite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', autograder.core.fields.ShortStringField(help_text='The name used to identify this StudentTestSuite.\n                     Must be non-empty and non-null.', max_length=255, strip=False)),
                ('read_only_project_files', models.BooleanField(default=True, help_text='When True, project files needed for this suite will be read-only when this\n                     suite is graded.')),
                ('buggy_impl_names', autograder.core.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, help_text='The names of buggy implementations that student tests should be run against.', max_string_length=255, size=None, string_validators=[], strip_strings=True)),
                ('points_per_exposed_bug', models.IntegerField(default=0, help_text='The number of points to be awarded per buggy implementation exposed by\n                     the student test cases.', validators=[django.core.validators.MinValueValidator(0)])),
                ('max_points', models.IntegerField(blank=True, default=None, help_text='An optional ceiling on the number of points to be awarded.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('deferred', models.BooleanField(default=False, help_text='If true, this student test suite can be graded asynchronously.\n                     Deferred suites that have yet to be graded do not prevent members\n                     of a group from submitting again.')),
                ('docker_image_to_use', autograder.core.fields.EnumField(default=autograder.core.constants.SupportedImages('default'), enum_type=autograder.core.constants.SupportedImages, help_text='An identifier for the Docker image that the sandbox should be created from.')),
                ('allow_network_access', models.BooleanField(default=False, help_text='Specifies whether the sandbox should allow commands run inside of it to\n                     make network calls outside of the sandbox.')),
                ('get_student_test_names_command', models.OneToOneField(blank=True, default=autograder.core.models.student_test_suite.student_test_suite.make_default_get_student_test_names_cmd, help_text="This required command should print out a whitespace-separated\n                     list of detected student names. The output of this command will\n                     be parsed using Python's str.split().\n                     NOTE: This AGCommand's 'cmd' field must not be blank.", on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGCommand')),
                ('grade_buggy_impl_command', models.OneToOneField(blank=True, default=autograder.core.models.student_test_suite.student_test_suite.make_default_grade_buggy_impl_command, help_text="This command will be run once for every buggy implementation.\n                     A nonzero exit status indicates that the valid student tests exposed the\n                     buggy impl, whereas an exit status of zero indicates that the student\n                     tests did not expose the buggy impl.\n                     This command must contain the placeholders ${valid_student_test_names} and ${buggy_impl_name}. The placeholder\n                     ${valid_student_test_names} will be replaced with the names of valid student test cases, separated\n                     by a space. The placeholder ${buggy_impl_name} will be replaced with the name of\n                     the buggy impl that the student tests are being run against.\n                     NOTE: This AGCommand's 'cmd' field must not be blank.\n                     ", on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGCommand')),
            ],
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StudentTestSuiteFeedbackConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('visible', models.BooleanField(default=True)),
                ('show_setup_return_code', models.BooleanField(default=True, help_text='"Whether to show the return code from the setup command\n                      and whether the command timed out.')),
                ('show_setup_stdout', models.BooleanField(default=False, help_text='Whether to show stdout from the setup command.')),
                ('show_setup_stderr', models.BooleanField(default=False, help_text='Whether to show stderr from the setup command')),
                ('show_get_test_names_return_code', models.BooleanField(default=True, help_text='"Whether to show the return code from the get_test_names command\n                      and whether the command timed out.')),
                ('show_get_test_names_stdout', models.BooleanField(default=False, help_text='Whether to show stdout from the get_test_names command.')),
                ('show_get_test_names_stderr', models.BooleanField(default=False, help_text='Whether to show stderr from the get_test_names command')),
                ('show_validity_check_stdout', models.BooleanField(default=False, help_text='Whether to show stdout from all runs of the setup command.')),
                ('show_validity_check_stderr', models.BooleanField(default=False, help_text='Whether to show stderr from all runs of the setup command.')),
                ('show_grade_buggy_impls_stdout', models.BooleanField(default=False, help_text='Whether to show stdout from grading all buggy impls.')),
                ('show_grade_buggy_impls_stderr', models.BooleanField(default=False, help_text='Whether to show stderr from grading all buggy impls.')),
                ('show_invalid_test_names', models.BooleanField(default=False, help_text="Whether to show the names of student tests that failed the validity check.\n                     Setting this to true will also include information about whether\n                     invalid test cases exceeded the validity check command's time limit.")),
                ('show_points', models.BooleanField(default=False, help_text='Whether to show how many points were awarded.')),
                ('bugs_exposed_fdbk_level', autograder.core.fields.EnumField(default=autograder.core.models.student_test_suite.student_test_suite.BugsExposedFeedbackLevel('no_feedback'), enum_type=autograder.core.models.student_test_suite.student_test_suite.BugsExposedFeedbackLevel)),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StudentTestSuiteResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('student_tests', autograder.core.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, help_text='The names of discovered student test cases.', max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('invalid_tests', autograder.core.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, help_text='The names of student test cases that failed the validity check.', max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('timed_out_tests', autograder.core.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, help_text='The names of student test cases that timed out during the validity check.', max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('bugs_exposed', autograder.core.fields.StringArrayField(allow_empty_strings=False, blank=True, default=list, help_text="The names of instructor buggy implementations that were exposed\n                     by the student's test cases.", max_string_length=255, size=None, string_validators=[], strip_strings=False)),
                ('get_test_names_result', models.OneToOneField(default=autograder.core.models.student_test_suite.student_test_suite_result._make_get_test_names_result_default, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGCommandResult')),
                ('setup_result', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGCommandResult')),
                ('student_test_suite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.StudentTestSuite')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_test_suite_results', to='core.Submission')),
            ],
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.RemoveField(
            model_name='agtestcommandresult',
            name='stderr',
        ),
        migrations.RemoveField(
            model_name='agtestcommandresult',
            name='stdout',
        ),
        migrations.AlterField(
            model_name='agtestcase',
            name='normal_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_case.make_default_test_fdbk, help_text='Feedback settings for a normal Submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCaseFeedbackConfig'),
        ),
        migrations.AlterField(
            model_name='agtestcase',
            name='past_limit_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_case.make_default_test_fdbk, help_text='Feedback settings for a Submission that is past the daily limit.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCaseFeedbackConfig'),
        ),
        migrations.AlterField(
            model_name='agtestcase',
            name='staff_viewer_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_case.make_default_test_fdbk, help_text='Feedback settings for a staff member viewing a Submission from another group.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCaseFeedbackConfig'),
        ),
        migrations.AlterField(
            model_name='agtestcase',
            name='ultimate_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_case.make_default_test_fdbk, help_text='Feedback settings for an ultimate Submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCaseFeedbackConfig'),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='ag_test_case',
            field=models.ForeignKey(help_text='The AGTestCase that this command belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='ag_test_commands', to='core.AGTestCase'),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='cmd',
            field=models.CharField(help_text='A string containing the command to be run.\n                     Note: This string will be split using shlex.split() before it is executed.\n                     Note: This string defaults to the "true" command\n                     (which does nothing and returns 0) so that AGCommands are\n                     default-creatable.', max_length=1000),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='name',
            field=autograder.core.fields.ShortStringField(help_text='The name used to identify this command.\n                         Must be non-empty and non-null.\n                         Must be unique among commands that belong to the same autograder test.\n                         This field is REQUIRED.', max_length=255, strip=False),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='normal_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_default_command_fdbk, help_text='Feedback settings for a normal Submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='past_limit_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_default_command_fdbk, help_text='Feedback settings for a Submission that is past the daily limit.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='process_spawn_limit',
            field=models.IntegerField(default=0, help_text="The maximum number of processes that the command is allowed to spawn.\n            Must be >= 0\n            Must be <= autograder.shared.global_constants.MAX_PROCESS_LIMIT\n            NOTE: This limit applies cumulatively to the processes\n                    spawned by the main program being run. i.e. If a\n                    spawned process spawns it's own child process, both\n                    of those processes will count towards the main\n                    program's process limit.", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(16)]),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='staff_viewer_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_max_command_fdbk, help_text='Feedback settings for a staff member viewing a Submission from another group.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='time_limit',
            field=models.IntegerField(default=10, help_text='The time limit in seconds to be placed on the\n            command.\n            Must be > 0\n            Must be <= autograder.shared.global_constants\n                                 .MAX_SUBPROCESS_TIMEOUT', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)]),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='ultimate_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_command.make_default_ultimate_submission_command_fdbk, help_text='Feedback settings for an ultimate Submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestCommandFeedbackConfig'),
        ),
        migrations.AlterField(
            model_name='agtestcommand',
            name='virtual_memory_limit',
            field=models.IntegerField(default=500000000, help_text='The maximum amount of virtual memory\n            (in bytes) the command can use.\n            Must be > 0\n            Must be <= autograder.shared.global_constants.MAX_VIRTUAL_MEM_LIMIT\n            NOTE: Setting this value too low may cause the command to crash prematurely.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2000000000)]),
        ),
        migrations.AlterField(
            model_name='agtestcommandresult',
            name='return_code',
            field=models.IntegerField(blank=True, default=None, help_text='"The return code of the completed command. A value of None\n                      for a completed usually is caused by the the command timing out.', null=True),
        ),
        migrations.AlterField(
            model_name='agtestcommandresult',
            name='timed_out',
            field=models.BooleanField(default=False, help_text='Whether the command exceeded its time limit.'),
        ),
        migrations.AlterField(
            model_name='agtestsuite',
            name='normal_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_suite.make_default_suite_fdbk, help_text='Feedback settings for a normal submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestSuiteFeedbackConfig'),
        ),
        migrations.AlterField(
            model_name='agtestsuite',
            name='past_limit_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_suite.make_default_suite_fdbk, help_text='Feedback settings for a submission that is past the daily limit.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestSuiteFeedbackConfig'),
        ),
        migrations.AlterField(
            model_name='agtestsuite',
            name='read_only_project_files',
            field=models.BooleanField(default=True, help_text='When True, project files needed for this suite will be read-only when this\n                     suite is run.'),
        ),
        migrations.AlterField(
            model_name='agtestsuite',
            name='setup_suite_cmd',
            field=models.CharField(blank=True, help_text="A command to be run before this suite's tests are run.\n                     This command is only run once at the beginning of the suite.\n                     This command will be run after the student and project files\n                     have been added to the sandbox.", max_length=1000),
        ),
        migrations.AlterField(
            model_name='agtestsuite',
            name='staff_viewer_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_suite.make_default_suite_fdbk, help_text='Feedback settings for a staff member viewing a submission from another group.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestSuiteFeedbackConfig'),
        ),
        migrations.AlterField(
            model_name='agtestsuite',
            name='teardown_suite_cmd',
            field=models.CharField(blank=True, help_text="A command to be run after this suite's tests are run.\n                     This command is only run once at the end of the suite.", max_length=1000),
        ),
        migrations.AlterField(
            model_name='agtestsuite',
            name='ultimate_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.ag_test.ag_test_suite.make_default_suite_fdbk, help_text='Feedback settings for an ultimate submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGTestSuiteFeedbackConfig'),
        ),
        migrations.AlterUniqueTogether(
            name='agtestcaseresult',
            unique_together=set([('ag_test_case', 'ag_test_suite_result')]),
        ),
        migrations.AlterUniqueTogether(
            name='agtestsuiteresult',
            unique_together=set([('ag_test_suite', 'submission')]),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='normal_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.student_test_suite.student_test_suite.make_default_command_fdbk, help_text='Feedback settings for a normal Submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.StudentTestSuiteFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='past_limit_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.student_test_suite.student_test_suite.make_default_command_fdbk, help_text='Feedback settings for a Submission that is past the daily limit.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.StudentTestSuiteFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='project',
            field=models.ForeignKey(help_text='The Project that this student test suite belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='student_test_suites', to='core.Project'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='project_files_needed',
            field=models.ManyToManyField(help_text='The project files that will be copied into the sandbox before the suite\n                     is graded.', to='core.UploadedFile'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='setup_command',
            field=models.OneToOneField(blank=True, default=None, help_text="A command to be run after student and project files have\n                     been added to the sandbox but before any other commands are run.\n                     A value of None indicates that there is no setup command.\n                     If this command is not None, then the AGCommand's 'cmd' field must\n                     not be blank.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.AGCommand'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='staff_viewer_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.student_test_suite.student_test_suite.make_max_student_suite_fdbk, help_text='Feedback settings for a staff member viewing a Submission from another group.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.StudentTestSuiteFeedbackConfig'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='student_files_needed',
            field=models.ManyToManyField(help_text='Student-submitted files matching these patterns will be copied into the\n                     sandbox before the suite is graded.', to='core.ExpectedStudentFilePattern'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='student_test_validity_check_command',
            field=models.OneToOneField(blank=True, default=autograder.core.models.student_test_suite.student_test_suite.make_default_validity_check_command, help_text="This command will be run once for each detected student test case.\n                     An exit status of zero indicates that a student test case is valid,\n                     whereas a nonzero exit status indicates that a student test case\n                     is invalid.\n                     This command must contain the placeholder ${student_test_name} at least once. That\n                     placeholder will be replaced with the name of the student test case\n                     that is to be checked for validity.\n                     NOTE: This AGCommand's 'cmd' field must not be blank.\n                     ", on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.AGCommand'),
        ),
        migrations.AddField(
            model_name='studenttestsuite',
            name='ultimate_submission_fdbk_config',
            field=models.OneToOneField(default=autograder.core.models.student_test_suite.student_test_suite.make_default_ultimate_submission_command_fdbk, help_text='Feedback settings for an ultimate Submission.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.StudentTestSuiteFeedbackConfig'),
        ),
        migrations.AlterUniqueTogether(
            name='studenttestsuiteresult',
            unique_together=set([('student_test_suite', 'submission')]),
        ),
        migrations.AlterUniqueTogether(
            name='studenttestsuite',
            unique_together=set([('name', 'project')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='studenttestsuite',
            order_with_respect_to='project',
        ),
    ]
