"""
Django settings for autograder project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import datetime
import os
import json

from django.utils.crypto import get_random_string

from kombu import Queue


MEDIA_ROOT = os.environ.get('MEDIA_ROOT')

SETTINGS_DIR = os.path.dirname(os.path.abspath(__file__))

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split()


def generate_secrets(overwrite_prompt=True):
    """
    Generates an app secret key and a database password and writes
    them to a json file.
    """
    secrets_file = os.path.join(SETTINGS_DIR, 'secrets.json')
    if os.path.exists(secrets_file) and overwrite_prompt:
        choice = input(
            'Secrets file already exists. Overwrite? [y/N]'
        ).strip().lower()
        if choice != "y":
            print('Exiting')
            raise SystemExit()

    chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
    secrets = {
        'secret_key': get_random_string(50, chars),
        # 'db_password': get_random_string(50, chars)
    }

    with open(secrets_file, 'w') as f:
        json.dump(secrets, f)


# SECURITY WARNING: keep the secret key used in production secret!
_secrets_filename = os.path.join(SETTINGS_DIR, 'secrets.json')
if not os.path.exists(_secrets_filename):
    generate_secrets(overwrite_prompt=False)

SECRET_KEY = ''
with open(_secrets_filename) as f:
    secrets = json.load(f)
    SECRET_KEY = secrets.pop('secret_key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.staticfiles',

    'rest_framework',
    'polymorphic',

    'django_extensions',

    'autograder.core',
    'autograder.rest_api',
    'autograder.grading_tasks',
    'autograder.utils',
]

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',

    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'autograder.rest_api.authentication.google_identity_toolkit_auth.GoogleIdentityToolkitAuth',
    )
}

ROOT_URLCONF = 'autograder.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'autograder.wsgi.application'

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('AG_DB_NAME', ''),
        'USER': os.environ.get('AG_DB_USER', ''),
        'PASSWORD': os.environ.get('AG_DB_PASSWORD'),
        'HOST': os.environ.get('AG_DB_HOST', ''),
        'PORT': os.environ.get('AG_DB_PORT', '')
    },
}


CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': '{host}:{port}'.format(
            host=os.environ.get('AG_REDIS_HOST', 'localhost'),
            port=os.environ.get('AG_REDIS_PORT', '6379')),
    },
}


# ----- Celery settings ----- #

CELERYD_PREFETCH_MULTIPLIER = 1

# FIXME
# CELERY_ACCEPT_CONTENT = ['json']  # Ignore other content
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_QUEUES = (
    Queue('submissions'),
    Queue('deferred'),
    Queue('submission_listener')
)

CELERYBEAT_SCHEDULE = {
    'queue-submissions': {
        'task': 'autograder.grading_tasks.tasks.queue_submissions',
        'schedule': datetime.timedelta(seconds=5),  # UPDATE AS DESIRED
        'options': {
            'queue': 'submission_listener'
        }
    },
}
