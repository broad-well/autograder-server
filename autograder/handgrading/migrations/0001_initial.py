# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-11-22 18:05
from __future__ import unicode_literals

import autograder.core.fields
import autograder.core.models.ag_model_base
import autograder.handgrading.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0012_rerunsubmissionstask'),
    ]

    operations = [
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('short_description', models.TextField(blank=True)),
                ('long_description', models.TextField(blank=True)),
                ('points', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AppliedAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('comment', models.TextField(blank=True)),
                ('annotation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='handgrading.Annotation')),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ArbitraryPoints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('text', models.TextField(blank=True)),
                ('points', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('text', models.TextField()),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Criterion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('short_description', models.TextField(blank=True)),
                ('long_description', models.TextField(blank=True)),
                ('points', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CriterionResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('selected', models.BooleanField()),
                ('criterion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criterion_result', to='handgrading.Criterion')),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HandgradingResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HandgradingRubric',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('points_style', autograder.core.fields.EnumField(enum_type=autograder.handgrading.models.PointsStyle)),
                ('max_points', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('show_grades_and_rubric_to_students', models.BooleanField()),
                ('handgraders_can_leave_comments', models.BooleanField()),
                ('handgraders_can_apply_arbitrary_points', models.BooleanField()),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.Project')),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('first_line', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('last_line', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('filename', models.TextField()),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.AddField(
            model_name='handgradingresult',
            name='handgrading_rubric',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='handgrading.HandgradingRubric'),
        ),
        migrations.AddField(
            model_name='handgradingresult',
            name='submission',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.Submission'),
        ),
        migrations.AddField(
            model_name='criterionresult',
            name='handgrading_result',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criterion_results', to='handgrading.HandgradingResult'),
        ),
        migrations.AddField(
            model_name='criterion',
            name='handgrading_rubric',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criteria', to='handgrading.HandgradingRubric'),
        ),
        migrations.AddField(
            model_name='comment',
            name='handgrading_result',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='handgrading.HandgradingResult'),
        ),
        migrations.AddField(
            model_name='comment',
            name='location',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='handgrading.Location'),
        ),
        migrations.AddField(
            model_name='arbitrarypoints',
            name='handgrading_result',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arbitrary_points', to='handgrading.HandgradingResult'),
        ),
        migrations.AddField(
            model_name='arbitrarypoints',
            name='location',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='handgrading.Location'),
        ),
        migrations.AddField(
            model_name='appliedannotation',
            name='handgrading_result',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applied_annotations', to='handgrading.HandgradingResult'),
        ),
        migrations.AddField(
            model_name='appliedannotation',
            name='location',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='handgrading.Location'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='handgrading_rubric',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotations', to='handgrading.HandgradingRubric'),
        ),
    ]
