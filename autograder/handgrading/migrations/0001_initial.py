# Generated by Django 2.0.1 on 2018-03-02 16:21

import autograder.core.fields
import autograder.core.models.ag_model_base
import autograder.handgrading.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0020_course_handgraders'),
    ]

    operations = [
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('short_description', models.TextField(blank=True, help_text='A short description of this Annotation.')),
                ('long_description', models.TextField(blank=True, help_text='A long description of this Criterion. Note that there is no\n                     enforced length difference between short_ and long_description.\n                     The separation is purely to be used by clients.')),
                ('deduction', models.FloatField(blank=True, default=0, help_text='The amount of points to deduct from a handgrading score when\n                     applied. Must be non-positive.', validators=[django.core.validators.MaxValueValidator(0)])),
                ('max_deduction', models.FloatField(blank=True, default=None, help_text='The maximum amount of points that can be cumulatively\n                     deducted from a handgrading score by applications of\n                     this annotation. Must be None or non-positive.', null=True, validators=[django.core.validators.MaxValueValidator(0)])),
            ],
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AppliedAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('comment', models.TextField(blank=True, help_text='REMOVE ME')),
                ('annotation', models.ForeignKey(help_text='The Annotation that was applied to the source code.', on_delete=django.db.models.deletion.CASCADE, to='handgrading.Annotation')),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('text', models.TextField(help_text='Text to be shown to students.')),
            ],
            options={
                'ordering': ('pk',),
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Criterion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('short_description', models.TextField(blank=True, help_text='A short description of this Criterion.')),
                ('long_description', models.TextField(blank=True, help_text='A long description of this Criterion. Note that there is no\n                     enforced length difference between short_ and long_description.\n                     The separation is purely to be used by clients.')),
                ('points', models.FloatField(blank=True, default=0, help_text='The amount of points to add or subtract from a handgrading score\n                     when selected.')),
            ],
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CriterionResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('selected', models.BooleanField(help_text="When True, indicates that the criterion's point allotment should be\n                     added to (or subtracted from if negative) the total handgrading points.")),
                ('criterion', models.ForeignKey(help_text='The Criterion that the CriterionResult is tied to.', on_delete=django.db.models.deletion.CASCADE, related_name='criterion_results', to='handgrading.Criterion')),
            ],
            options={
                'ordering': ('criterion___order',),
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HandgradingResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('finished_grading', models.BooleanField(default=False, help_text="Handgraders should set this field to True when they are finished\n                     grading this group's submission.")),
                ('points_adjustment', models.FloatField(blank=True, default=0, help_text="An arbitrary adjustment to this result's total points.\n                     Note that this does not affect total points possible.")),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HandgradingRubric',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('points_style', autograder.core.fields.EnumField(blank=True, default=autograder.handgrading.models.PointsStyle('start_at_zero_and_add'), enum_type=autograder.handgrading.models.PointsStyle, help_text='Determines how total_points and total_possible_points are calculated\n                     for HandgradingResults.')),
                ('max_points', models.FloatField(blank=True, default=None, help_text='The denominator of a handgrading score.\n                     When points_style is "start_at_zero_and_add", this value\n                     overrides the sum of positive Criteria point values as the\n                     total points possible.\n                     When points_style is "start_at_max_and_subtract", this field\n                     is REQUIRED.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('show_grades_and_rubric_to_students', models.BooleanField(default=False, help_text='Whether students can see their handgrading scores,\n                     including information from the rubric.')),
                ('handgraders_can_leave_comments', models.BooleanField(default=False, help_text='Whether handgraders can add comments to a HandgradingResult.')),
                ('handgraders_can_adjust_points', models.BooleanField(default=False, help_text='Whether handgraders can edit HandgradingResult.point_adjustment.')),
                ('project', models.OneToOneField(help_text='The Project this HandgradingRubric belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='handgrading_rubric', to='core.Project')),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('filename', models.TextField(help_text='The file that contains the source code region.')),
                ('first_line', models.IntegerField(help_text='The first line in the source code region. Must be non-negative.', validators=[django.core.validators.MinValueValidator(0)])),
                ('last_line', models.IntegerField(help_text='The last line in the source code region (inclusive). Must be non-negative.', validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'abstract': False,
            },
            bases=(autograder.core.models.ag_model_base.ToDictMixin, models.Model),
        ),
        migrations.AddField(
            model_name='handgradingresult',
            name='handgrading_rubric',
            field=models.ForeignKey(help_text='The HandgradingRubric that this HandgradingResult is based on.', on_delete=django.db.models.deletion.CASCADE, related_name='handgrading_results', to='handgrading.HandgradingRubric'),
        ),
        migrations.AddField(
            model_name='handgradingresult',
            name='submission',
            field=models.OneToOneField(help_text='The specific submission that is being handgraded.', on_delete=django.db.models.deletion.CASCADE, related_name='handgrading_result', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='handgradingresult',
            name='submission_group',
            field=models.OneToOneField(help_text='The SubmissionGroup that this HandgradingResult is for.', on_delete=django.db.models.deletion.CASCADE, related_name='handgrading_result', to='core.SubmissionGroup'),
        ),
        migrations.AddField(
            model_name='criterionresult',
            name='handgrading_result',
            field=models.ForeignKey(help_text='The HandgradingResult this CriterionResult belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='criterion_results', to='handgrading.HandgradingResult'),
        ),
        migrations.AddField(
            model_name='criterion',
            name='handgrading_rubric',
            field=models.ForeignKey(help_text='The rubric this Criterion belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='criteria', to='handgrading.HandgradingRubric'),
        ),
        migrations.AddField(
            model_name='comment',
            name='handgrading_result',
            field=models.ForeignKey(help_text='The HandgradingResult that this Comment belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='handgrading.HandgradingResult'),
        ),
        migrations.AddField(
            model_name='comment',
            name='location',
            field=models.OneToOneField(blank=True, help_text='When not None, specifies the source code location this comment\n                     applies to.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='handgrading.Location'),
        ),
        migrations.AddField(
            model_name='appliedannotation',
            name='handgrading_result',
            field=models.ForeignKey(help_text='The HandgradingResult the applied annotation belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='applied_annotations', to='handgrading.HandgradingResult'),
        ),
        migrations.AddField(
            model_name='appliedannotation',
            name='location',
            field=models.OneToOneField(help_text='The source code location where the Annotation was applied.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='handgrading.Location'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='handgrading_rubric',
            field=models.ForeignKey(help_text='The HandgradingRubric this Annotation belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='annotations', to='handgrading.HandgradingRubric'),
        ),
        migrations.AlterOrderWithRespectTo(
            name='criterion',
            order_with_respect_to='handgrading_rubric',
        ),
        migrations.AlterOrderWithRespectTo(
            name='annotation',
            order_with_respect_to='handgrading_rubric',
        ),
    ]
